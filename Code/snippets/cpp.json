{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Codeforces C++ Template": {
		"prefix": "cfcpp",
		"body": [
			"/// Author: Aucker (aucker)",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"typedef long long ll;",
			"#define fast_io            \\",
			"  ios::sync_with_stdio(0); \\",
			"  cin.tie(0);              \\",
			"  cout.tie(0);",
			"#define YES cout << \"YES\" << endl;",
			"#define NO cout << \"NO\" << endl;",
			"#define Yes cout << \"Yes\" << endl;",
			"#define No cout << \"No\" << endl;",
			"#define newline cout << endl;",
			"#define last(x) x[x.size() - 1];",
			"#define pb(x) push_back(x);",
			"#define mp(x, y) make_pair(x, y);",
			"",
			"",
			"int main() {",
			"  fast_io",
			"",
			"  int t;",
			"  cin >> t;",
			"  while (t--) {",
			"    $1",
			"  }",
			"  return 0;",
			"}"
		],
		"description": "Codeforces C++ Template",
	},

	"LeetCode C++ Template": {
		"prefix": "lcpp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"class Solution {",
			" public:",
			"  $1",
			"",
			"};",
		],
		"description": "LeetCode C++ Template",
	},
	"CPP listnode": {
		"prefix": "listnode",
		"body": [
			"struct ListNode {",
			"  int val;",
			"  ListNode* next;",
			"  ListNode() : val(0), next(nullptr) {}",
			"  ListNode(int x) : val(x), next(nullptr) {}",
			"  ListNode(int x, ListNode* next) : val(x), next(next) {}",
			"};",
		],
		"description": "C++ ListNode Template",
	},

	"CPP TreeNode": {
		"prefix": "treenode",
		"body": [
			"struct TreeNode {",
			"  int val;",
			"  TreeNode* left;",
			"  TreeNode* right;",
			"  TreeNode() : val(0), left(nullptr), right(nullptr) {}",
			"  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
			"  TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}",
			"};",
		],
		"description": "C++ TreeNode Template",
	},
}